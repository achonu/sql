-- JOIN

SELECT *
FROM orders
JOIN customers
  ON orders.customer_id = customers.customer_id;


SELECT order_id, first_name, last_name
FROM orders
JOIN customers
   ON orders.customer_id = customers.customer_id;


SELECT order_id, o.customer_id, first_name, last_name
FROM orders o
JOIN customers c
   ON o.customer_id = c.customer_id;

-- JOIN across databases

USE sql_inventory;

SELECT *
FROM sql_store.order_items oi
JOIN products p
  ON oi.product_id = p.product_id;

-- SELF JOINS

USE sql_hr;

SELECT *
FROM employees e
JOIN employees m -- manager 
  ON e.reports_to = m.employee_id; 

-- JOIN Multiple Tables

USE sql_store;

SELECT
  o.order_id,
  o.order_date,
  c.first_name,
  c.last_name,
  os.name AS status
FROM orders o
JOIN customers c
  ON o.customer_id = c.customer_id
JOIN order_statuses os
  ON o.status = os.order_status_id;


-- Compound JOIN

SELECT * 
FROM order_items oi
JOIN order_item_notes oin
  ON oi.order_id = oin.order_id
  AND oi.product_id = oin.product_id;


-- LEFT JOIN
-- shows all customers regardless if they have an order id or not. Result set will show as NULL for some records.


SELECT
  c.customer_id,
  c.first_name,
  o.order_id
FROM customers c
LEFT JOIN orders o
  ON c.customer_id = o.customer_id
ORDER BY c.customer_id;


-- RIGHT JOIN
-- shows all customers that have an order id - no NULL values returned.

SELECT
  c.customer_id,
  c.first_name,
  o.order_id
FROM customers c
RIGHT JOIN orders o
  ON c.customer_id = o.customer_id
ORDER BY c.customer_id;


-- Outer JOINS between Multiple tables
-- 2nd LEFT JOIN to see ALL orders returned whether a shipper id is present or not.

SELECT
  c.customer_id,
  c.first_name,
  o.order_id
  sh.name AS shipper
FROM customers c
LEFT JOIN orders o
  ON c.customer_id = o.customer_id
LEFT JOIN shippers sh
  ON o.shipper_id = sh.shipper_id
ORDER BY c.customer_id;


-- SELF OUTER JOINS
-- m = manager

USE sql_hr;

SELECT
  e.employee_id,
  e.first_name,
  m.first_name AS manager
FROM employees e
LEFT JOIN employees m
  ON e.reports_to = m.employee_id;


-- USING
-- if the condition/clause is exactly the same then we can replace the condition with a USING clause. ON o.customer_id = c.customer_id

SELECT 
  o.order_id,
  c.first_name
FROM orders o
JOIN customers c
  USING (customer_id)



-- CROSS JOINS

SELECT
  c.first_name AS customer,
  p.name AS product
FROM customers c
CROSS JOIN products p
ORDER BY c.first_name





